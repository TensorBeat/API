syntax = "proto3";

package tensorbeat.datalake;

option go_package = "./proto;proto";

import "tensorbeat/common.proto";


enum Filter {
    ANY = 0;
    ALL = 1;
    NONE = 2;
}

message GetSongsByTagsRequest {
    
    /*
        Pass in map of tags to be matched on returned songs
        EX:
        {
            "genre": "rock",
            "spectrogram_id": "*",
        }
        The tags will be combined using the filter:
        - ANY   means songs matching any of the tags will be returned.
        - ALL   means songs matching all of the tags will be returned.
        - NONE  means songs that dont match any of the tags will be returned.

        Using an * for the value will return any song with that tag set.
        Using a specific value for the tag will return only songs with that exact combination of Key/Value

    */
    map<string, string> tags = 1;
    Filter filter = 2;
    optional string token = 3;
    optional int32 limit = 4;

}

message GetSongsByTagsResponse {
    repeated tensorbeat.common.File songs = 1;
    string token = 2;
}

message AddSongsRequest {
    repeated tensorbeat.common.AddFile songs = 1;
}

message AddSongsResponse {
    bool successful = 1;
}

message AddTagsRequest {
    string id = 1;
    map<string, string> tags = 2;
}

message AddTagsResponse {
    bool successful = 1;
}

message RemoveTagsRequest {
    string id = 1;
    map<string, string> tags = 2;
}

message RemoveTagsResponse {
    bool successful = 1;
}

message GetAllSongsRequest {
    optional string token = 1;
    optional int32 limit = 2;
}
message GetAllSongsResponse {
    repeated tensorbeat.common.File songs = 1;
    string token = 2;
}

message GetSongsByIDsRequest {
    repeated string ids = 1;
    optional string token = 2;
    optional int32 limit = 3;
}
message GetSongsByIDsResponse {
    repeated tensorbeat.common.File songs = 1;
    string token = 2;
}

service DatalakeService {
    rpc GetAllSongs(GetAllSongsRequest) returns (GetAllSongsResponse);
    rpc GetSongsByIDs(GetSongsByIDsRequest) returns (GetSongsByIDsResponse);

    rpc GetSongsByTags(GetSongsByTagsRequest) returns (GetSongsByTagsResponse);
    rpc AddSongs(AddSongsRequest) returns (AddSongsResponse);
    rpc AddTags(AddTagsRequest) returns (AddTagsResponse);
    rpc RemoveTags(RemoveTagsRequest) returns (RemoveTagsResponse);
}